#include<bits/stdc++.h>
using namespace std;



using namespace std;

string longestPalindrome(string s) {
    int n = s.length();
    if (n == 0) return "";
    
    // Create a DP table to store palindrome information
    vector<vector<bool>> dp(n, vector<bool>(n, false));
    
    // Variables to store the start index and max length of the longest palindrome
    int start = 0, max_len = 1;
    
    // Every single character is a palindrome
    for (int i = 0; i < n; i++) {
        dp[i][i] = true;
    }
    
    // Check for palindrome of length 2
    for (int i = 0; i < n - 1; i++) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = true;
            start = i;
            max_len = 2;
        }
    }
    
    // Check for palindromes of length greater than 2
    for (int length = 3; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;  // End index of current substring
            if (s[i] == s[j] && dp[i + 1][j - 1]) {
                dp[i][j] = true;
                start = i;
                max_len = length;
            }
        }
    }
    
    // Return the longest palindrome substring
    return s.substr(start, max_len);
}
