#include<bits/stdc++.h>
using namespace std;





int countAtMostKDistinct(string s, int k) {
    int left = 0, right = 0, count = 0;
    unordered_map<char, int> charCount;  // Frequency map to store character counts

    while (right < s.size()) {
        charCount[s[right]]++;
        
        // If there are more than 'k' distinct characters, shrink the window from the left
        while (charCount.size() > k) {
            charCount[s[left]]--;
            if (charCount[s[left]] == 0) {
                charCount.erase(s[left]);  // Remove the character if its count becomes zero
            }
            left++;
        }
        
        // Add the number of substrings that end at 'right' and have at most 'k' distinct characters
        count += right - left + 1;
        right++;
    }
    
    return count;
}

// Main function to count substrings with exactly k distinct characters
int countExactlyKDistinct(string s, int k) {
    // The number of substrings with exactly k distinct characters is:
    // substrings with at most k distinct characters - substrings with at most (k-1) distinct characters
    return countAtMostKDistinct(s, k) - countAtMostKDistinct(s, k - 1);
}
